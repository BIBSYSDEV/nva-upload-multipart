openapi: 3.0.0
info:
  title: NVA S3 Multipart Upload
  description: API for uploading files. Written for [Uppy](https://uppy.io/)
  version: '1.0'
paths:
  /create:
    post:
      summary: Create a upload
      description: Creates a multipart upload for a file. This is later referenced for preparing file-parts, uploading, and finishing the upload..
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/file-upload'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadRequestBody'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUploadFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: 'Upload Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUploadResponseBody'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /listparts:
    post:
      summary: List the parts of a file that have already been uploaded.
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/file-upload'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPartsRequestBody'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPartsUploadFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: 'Parts already uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPartsResponseBody'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'The specified upload does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /prepare:
    post:
      summary: Generates a URL to upload a single file-part
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/file-upload'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrepareUploadPartRequestBody'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PrepareUploadPartFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: 'presigned upload url'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepareUploadPartResponseBody'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'The specified upload does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /abort:
    post:
      summary: Aborts a upload
      description: Aborts the Multipart upload, and deletes all parts that have been uploaded so far.
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/file-upload'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortUploadRequestBody'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AbortUploadFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '204':
          description: 'Upload Aborted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'The specified upload does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /complete:
    post:
      summary: Completes a upload
      description: Completes a Multipart upload, combining all parts into a single object in the S3 bucket
      tags:
        - external
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
          'https://api.nva.unit.no/scopes/third-party/file-upload'
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteUploadRequestBody'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompleteUploadFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: 'Upload Completed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'The specified upload does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
          - Ref: ExternalCognitoAuthorizerArn
  schemas:
    CreateUploadRequestBody:
      description: Request body containing details about file to be uploaded
      type: object
      properties:
        filename:
          type: string
          description: Name of file to upload
          example: publication.odf
        size:
          type: string
          description: Size of file in bytes
          example: 3027
        mimetype:
          type: string
          description: MIME type of file
          example: application/pdf
        lastmodified:
          type: string
          description: last modified time of the file, in millisecond since the UNIX epoch
          example: 1462097794000
        md5hash:
          type: string
          description: MD5 Hash to verify file after upload
          example: 7fd212d09247dc3ced8e3d3e97d381f8
      required:
        - filename
        - size
        - mimetype

    ListPartsRequestBody:
      description: List parts already uploaded
      type: object
      properties:
        uploadId:
          type: string
          description: S3 Identifier upload
          example: 543534gfdgdsgerFEDSGF4438rhgdg.FEfefgnijwefew8234234nfsdfweFESEGGL_MFAWRMFiewfnvsdo234950SDFM_FESAFn384234fsdDSAFNEUFAS.g8SDFNWEUFbf--
        key:
          type: string
          description: Identifier (UUID) of the uploaded file, object key in the S3 bucket
          example: f335ab02-35b3-4fda-9204-cd999e166ce0
      required:
        - uploadId
        - key

    PrepareUploadPartRequestBody:
      description: Request body containing details about parts to be uploaded
      type: object
      properties:
        uploadId:
          type: string
          description: S3 Identifier upload
          example: 543534gfdgdsgerFEDSGF4438rhgdg.FEfefgnijwefew8234234nfsdfweFESEGGL_MFAWRMFiewfnvsdo234950SDFM_FESAFn384234fsdDSAFNEUFAS.g8SDFNWEUFbf--
        key:
          type: string
          description: Identifier (UUID) of the uploaded file, object key in the S3 bucket
          example: f335ab02-35b3-4fda-9204-cd999e166ce0
        body:
          type: string
          description: This parts content. Its provided by Uppy, but not used by the API.
          example: {}
        number:
          type: integer
          description: The index of this part in the file (PartNumber in S3 terminology). Starts at 1
          example: 1
      required:
        - uploadId
        - key
        - number

    AbortUploadRequestBody:
      description: Request body containing which file to abort uploading
      type: object
      properties:
        uploadId:
          type: string
          description: S3 Identifier upload
        key:
          type: string
          description: Identifier (UUID) of the uploaded file, object key in the S3 bucket
      required:
        - uploadId
        - key

    CompleteUploadRequestBody:
      description: Request body containg the details of the file to be uploaded
      type: object
      properties:
        uploadId:
          type: string
          description: S3 Identifier upload
          example: 543534gfdgdsgerFEDSGF4438rhgdg.FEfefgnijwefew8234234nfsdfweFESEGGL_MFAWRMFiewfnvsdo234950SDFM_FESAFn384234fsdDSAFNEUFAS.g8SDFNWEUFbf--
        key:
          type: string
          description: Identifier (UUID) of the uploaded file, object key in the S3 bucket
          example: f335ab02-35b3-4fda-9204-cd999e166ce0
        parts:
          type: array
          description: List of part numbers and ETags that identify the individual parts of the upload
          items:
            type: object
            properties:
              ETag:
                type: string
                description: eTag of the uploaded part
                example: f335ab02-35b3-4fda-9204-cd999e166ce0
              PartNumber:
                type: integer
                description: The index of this part in the upload
                example: 1
      required:
        - uploadId
        - key
        - parts

    CreateUploadResponseBody:
      description: Data for created upload
      type: object
      properties:
        uploadId:
          type: string
          description: UploadID to access upload resource in S3
          example: 543534gfdgdsgerFEDSGF4438rhgdg.FEfefgnijwefew8234234nfsdfweFESEGGL_MFAWRMFiewfnvsdo234950SDFM_FESAFn384234fsdDSAFNEUFAS.g8SDFNWEUFbf--
        key:
          type: string
          description: Key to reference uploaded resource in S3 (UUID)
          example: f335ab02-35b3-4fda-9204-cd999e166ce0

    ListPartsResponseBody:
      description: Object containing details about parts that have been uploaded
      type: object
      properties:
        PartNumber:
          type: string
          description: The index in the file of the uploaded part.
          example: 1
        Size:
          type: string
          description: The size of the part in bytes.
          example: 3027
        ETag:
          type: string
          description: The ETag of the part, used to identify it when completing the multipart upload and combining all parts into a single file.
          example: f335ab02-35b3-4fda-9204-cd999e166ce0

    PrepareUploadPartResponseBody:
      description: A presigned url for uploading files. Upload the file to the URL with a PUT request.
      type: object
      properties:
        url:
          type: string
          description: The presigned URL to upload a part
          example: https://some-bucket.s3.eu-west-1.amazonaws.com/f335ab02-35b3-4fda-9204-cd999e166ce0?uploadId=543534gfdgdsgerFEDSGF4438rhgdg.FEfefgnijwefew8234234nfsdfweFESEGGL_MFAWRMFiewfnvsdo234950SDFM_FESAFn384234fsdDSAFNEUFAS.g8SDFNWEUFbf--&partNumber=1&X-Amz-Security-Token=token&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230502T094028Z&X-Amz-SignedHeaders=host&X-Amz-Expires=899&X-Amz-Credential=credentials&X-Amz-Signature=signature

    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank

    SimpleMessage:
      type: object
      description: NVA file upload message
      required:
        - message
      properties:
        message:
          type: string
          description: Human-readable message

    LocationResponse:
      description: A Response containing the metadata for a file
      type: object
      properties:
        location:
          deprecated: true
          type: string
          description: UUID of uploaded file
          example: f335ab02-35b3-4fda-9204-cd999e166ce0
        identifier:
          type: string
          description: UUID of uploaded file
          example: f335ab02-35b3-4fda-9204-cd999e166ce0
        mimeType:
          type: string
          description: Mime-type of uploaded file
          example: application/pdf
        size:
          type: number
          description: Size of uploaded file
          example: 12.22
        fileName:
          deprecated: true
          type: string
          description: Filename of uploaded file
          example: Untitled.pdf