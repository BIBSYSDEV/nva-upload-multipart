plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'



allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

    dependencies {
        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: 'v0.1.6'
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    }

    test {
        failFast = true
        finalizedBy jacocoTestReport
    }

    task buildZip(type: Zip) {
        from compileJava
        from processResources
        into('lib') {
            from configurations.runtimeClasspath
        }
    }

    project.tasks.build.dependsOn project.tasks.buildZip

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.000
                }
            }
        }
    }
}