plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

sourceCompatibility =  JavaVersion.VERSION_1_8  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_1_8 // bytecode target version

repositories {
    jcenter()
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.29'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.12.1'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.714'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    testImplementation 'commons-io:commons-io:2.6'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'

    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}


test {
    failFast = true
    finalizedBy jacocoTestReport
}

// We don't want a jar, just a fatJar
jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.900
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.900
            }
        }
    }
}
